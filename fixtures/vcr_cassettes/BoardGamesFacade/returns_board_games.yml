---
http_interactions:
- request:
    method: get
    uri: https://api.boardgameatlas.com/api/search?client_id=<DONT_EXPOSE_MY_DATA_PLEASE>&limit=20&name=catan
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.3.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Connection:
      - keep-alive
      X-Powered-By:
      - Express
      X-Ratelimit-Limit:
      - '420'
      X-Ratelimit-Remaining:
      - '419'
      Date:
      - Sat, 09 Jan 2021 23:52:02 GMT
      X-Ratelimit-Reset:
      - '1610236371'
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - Origin, X-Requested-With, Content-Type, Accept
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - W/"192c3-lT/O0heB5Qxy4Z82wRLO2dx9WGY"
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "games": [
    {
      "id": "OIXt3DmJU0",
      "name": "Catan",
      "year_published": 1995,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 45,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>The women and men of your expedition build the first two settlements. Fortunately, the land is rich in natural resources. You build roads and new settlements that eventually become cities. Will you succeed in gaining supremacy on Catan? Barter trade dominates the scene. Some resources you have in abundance, other resources are scarce. Ore for wool, brick for lumber - you trade according to what is needed for your current building projects. Proceed strategically! If you found your settlements in the right places and skillfully trade your resources, then the odds will be in your favor. But your opponents are smart too.</p>\r\n<p>To begin the game, we build the game board using hexagonal terrain tiles. Catan is born - a beautiful island with mountains, pastures, hills, fields, and forests, surrounded by the sea.</p>\r\n<p>Each of us places two small houses on spaces where three terrain hexes meet. They are our starting settlements.</p>\r\n<p>And so it begins. I roll two dice. An “11”! Each terrain hex is marked with a die roll number. Each player who owns a settlement adjacent to a terrain hex marked with the number rolled receives a resource produced by this hex. Hills produce brick, forests produce lumber, mountains produce ore, fields produce grain, and pastures produce wool.</p>\r\n<p>We use these resources to expand across Catan: we build roads and new settlements, or we upgrade our existing settlements to cities. For example, a road costs 1 brick and 1 lumber. If we do not have the necessary resources, we can acquire them by trading with our opponents.</p>\r\n<p>Each settlement is worth 1 victory point and each city is worth 2 victory points. If you expand cleverly, you may be the first player to reach 10 victory points and thus win the game!</p>",
      "description_preview": " The women and men of your expedition build the first two settlements. Fortunately, the land is rich in natural resources. You build roads and new settlements that eventually become cities. Will you succeed in gaining supremacy on Catan? Barter trade dominates the scene. Some resources you have in abundance, other resources are scarce. Ore for wool, brick for lumber - you trade according to what is needed for your current building projects. Proceed strategically! If you found your settlements in the right places and skillfully trade your resources, then the odds will be in your favor. But your opponents are smart too. \r\n To begin the game, we build the game board using hexagonal terrain tiles. Catan is born - a beautiful island with mountains, pastures, hills, fields, and forests, surrounded by the sea. \r\n Each of us places two small houses on spaces where three terrain hexes meet. They are our starting settlements. \r\n And so it begins. I roll two dice. An “11”! Each terrain hex is marked with a die roll number. Each player who owns a settlement adjacent to a terrain hex marked with the number rolled receives a resource produced by this hex. Hills produce brick, forests produce lumber, mountains produce ore, fields produce grain, and pastures produce wool. \r\n We use these resources to expand across Catan: we build roads and new settlements, or we upgrade our existing settlements to cities. For example, a road costs 1 brick and 1 lumber. If we do not have the necessary resources, we can acquire them by trading with our opponents. \r\n Each settlement is worth 1 victory point and each city is worth 2 victory points. If you expand cleverly, you may be the first player to reach 10 victory points and thus win the game! ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559258096678-51Eiofu9mqL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559258096678-51Eiofu9mqL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/OIXt3DmJU0/catan",
      "price": "43.88",
      "msrps": [
        {
          "country": "US",
          "price": 49
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        }
      ],
      "discount": "0.10",
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "publishers": [
        "KOSMOS",
        {},
        {},
        {},
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "ohABM4GjbC"
        },
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [
        {
          "id": "mavSOM8vjH"
        },
        {
          "id": "N0TkEGfEsF"
        },
        {
          "id": "7rV11PKqME"
        },
        {
          "id": "jZEDOpx07e"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Pete Fenlon",
        "Jason Hawkins",
        "Michaela Kienle",
        "Harald Lieske",
        "Michael Menzel",
        "Marion Pott",
        "Matt Schwabel",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [
        "Die Siedler von Catan ",
        "Les Colons de Catane",
        "Catan (Колонизаторы)",
        "Catan: Das Spiel",
        "Catan: Die Bordspel",
        "Catan: El Juego",
        "Catan: Gra planszowa",
        "Catan: Il Gioco",
        "Catan: Landnemarnir",
        "Catan: O Jogo",
        "Catan: Osnovna igra",
        "Catan: Telepesei",
        "Catane",
        "Catanin Uudisasukkaat",
        "I Coloni di Catan",
        "I Coloni di Katan",
        "Coloniștii din Catan",
        "Colonizadores de Catan",
        "Los Colonos de Catán",
        "Les Colons de Katane",
        "Os Descobridores de Catan",
        "Los Descubridores de Catán",
        "Els Colons de Catan",
        "Katan",
        "Katan no Kaitakusya",
        "Katanas ieceïotâji",
        "Katanas Ieceļotāji",
        "Katani Asustajad",
        "Katano salos naujakuriai",
        "Katano Salos Naujakuriai",
        "De Kolonisten van Catan",
        "Naseljenci otoka Catan",
        "Naseljenici ostrva Katan",
        "Naseljenici ostrva Katan / Насељеници острва Катан",
        "Die Ontdekkers van Catan",
        "Osadníci z Katanu",
        "Osadnicy z Catanu",
        "Settlers fra Catan",
        "The Settlers fra Catan",
        "Settlers från Catan",
        "The Settlers från Catan",
        "The Settlers of Catan",
        "Οι Άποικοι του Κατάν",
        "Заселниците на Катан",
        "Колонизаторы",
        "המתיישבים של קטאן",
        "นักบุกเบิกแห่ง Catan",
        "カタンの開拓者",
        "カタンの開拓者たち",
        "カタンの開拓者たち スタンダード版",
        "卡坦岛",
        "카탄",
        "카탄의 개척자"
      ],
      "num_user_ratings": 664,
      "average_user_rating": 3.199821853436608,
      "official_url": "https://www.catan.com/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "https://www.catan.com/game/catan#prof-easy",
      "weight_amount": 2,
      "weight_units": "lbs ",
      "size_height": 11.6,
      "size_depth": 3,
      "size_units": "inches ",
      "matches_specs": null,
      "spec": [],
      "rank": 21,
      "trending_rank": 0,
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "E5TYKwLTf0",
      "name": "Catan: Cities & Knights",
      "year_published": 1998,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "Dark clouds gather over the once peaceful landscape. Wild barbarians, lured by Catan’s wealth and power, maneuver to attack. Their massive warships loom against the bright orange horizon. You must be strong! Barbarians attack the weakest targets, and the victim of their onslaught will be the player who contributes the least to the defense of Catan.<br /><br /> Don’t take any chances! Field your knights!<br /><br /> In <b>Catan: Cities &amp; Knights</b> you engage in the defense of Catan and compete to build the three great metropolises of Catan. Each of these magnificent urban centers is even more valuable than a city. They’re also immune to the dangerous barbarians. Invest in city improvements, which you acquire using three commodities of trade: coin, paper, and cloth. If you improve your culture, muster your knights, and enrich your fine cities, you will be the master of the great realm of Catan!<br /><br /><b> Components:</b><br /> 36 Commodity Cards<br /> 54 Progress Cards<br /> 6 Victory Point Cards<br /> 3 Wooden Metropolis Pieces<br /> 1 Wooden Merchant Figure<br /> 1 Custom Event Die<br /> 1 Wooden Barbarian Ship<br /> 24 Wooden Knights<br /> 12 City Walls<br /> 4 Development Flip-Charts<br /> 1 Sea Frame Piece<br /> 1 Rulebook<br />",
      "description_preview": "Dark clouds gather over the once peaceful landscape. Wild barbarians, lured by Catan’s wealth and power, maneuver to attack. Their massive warships loom against the bright orange horizon. You must be strong! Barbarians attack the weakest targets, and the victim of their onslaught will be the player who contributes the least to the defense of Catan.   Don’t take any chances! Field your knights!   In  Catan: Cities & Knights  you engage in the defense of Catan and compete to build the three great metropolises of Catan. Each of these magnificent urban centers is even more valuable than a city. They’re also immune to the dangerous barbarians. Invest in city improvements, which you acquire using three commodities of trade: coin, paper, and cloth. If you improve your culture, muster your knights, and enrich your fine cities, you will be the master of the great realm of Catan!    Components:   36 Commodity Cards  54 Progress Cards  6 Victory Point Cards  3 Wooden Metropolis Pieces  1 Wooden Merchant Figure  1 Custom Event Die  1 Wooden Barbarian Ship  24 Wooden Knights  12 City Walls  4 Development Flip-Charts  1 Sea Frame Piece  1 Rulebook ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/E5TYKwLTf0/catan-cities-and-knights-expansion",
      "price": "4.49",
      "msrps": [
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.92",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        "Catan Studio",
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "r6yIFvyXDD"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        },
        {
          "id": "QAYkTHK1Dd"
        },
        {
          "id": "jZEDOpx07e"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Jason Hawkins",
        "Harald Lieske",
        "Michael Menzel",
        "Klaus Teuber",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [
        "Catan telepesei: Lovagok és Városok",
        "Catan: Borgir og riddarar",
        "Catan: Città e Cavalieri",
        "Catan: Ciudades y Caballeros",
        "Catan: Kaupungit ja Ritarit",
        "Catan: Lovagok és városok",
        "Catan: Miasta i Rycerze",
        "Catan: Miestai ir riteriai",
        "Catan: Städte & Ritter",
        "Catan: Steden & Ridders",
        "CATAN: Villes & Chevaliers",
        "Catan: Города и рыцари",
        "I Coloni di Catani: Città e Cavalieri",
        "Colonistii din Catan: Orase si Cavaleri",
        "Los Colonos de Catán: Ciudades y Caballeros",
        "Les Colons de Catane: Villes et Chevaliers",
        "Katanas ieceļotāji: Pilsētas un bruņiniek",
        "Katani asustajad: Linnad ja rüütlid",
        "Katano salos naujakuriai: Miestai ir riteriai",
        "De Kolonisten van Catan: Steden & Ridders",
        "Miasta i Rycerze z Catanu",
        "Naseljenci otoka Catan: Mesta in vitezi",
        "Osadníci z Katanu: rozšíření Města a rytíři",
        "Osadnicy z Catanu: Miasta i Rycerze",
        "Settlers fra Catan: Byer & Riddere",
        "The Settlers fra Catan: Byer og Riddere",
        "Settlers från Catan: Städer och Riddare",
        "Settlers of Catan: Cities & Knights",
        "The Settlers of Catan: Cities & Knights",
        "Die Siedler von Catan: Städte & Ritter",
        "Οι Άποικοι του Κατάν: Πόλεις και Ιππότες",
        "Οι πόλεις του Κατάν",
        "Колонизаторы. Города и рыцари",
        "המתיישבים של קטאן: ערים ואבירים",
        "カタンの開拓者たち 都市と騎士版",
        "卡坦島騎士擴充",
        "카탄 확장: 도시와 기사",
        "Catan: Cities & Knights",
        "Catan: Cities & Knights",
        "Catan Expansion: Cities & Knights Board Game",
        "Catan: Cities and Knights Game Expansion - Ding & Dent",
        "Catan: Cities and Knights Game Expansion",
        "Catan: Cities & Knights Expansion 5th Edition with 5-6 Player Extension"
      ],
      "num_user_ratings": 113,
      "average_user_rating": 3.5663716814159283,
      "official_url": "http://www.catan.com/game/catan-cities-knights-expansion#?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "http://www.catan.com/files/downloads/catan_ck_5th_ed_rules_150303.pdf",
      "matches_specs": null,
      "spec": [],
      "rank": 308,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "EvYzPCnCGG",
      "name": "Catan: 5-6 Player Extension",
      "year_published": 1996,
      "min_players": 5,
      "max_players": 6,
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "Now five to six players can explore and settle Catan! In the Catan: 5-6 Player Extension you control a group of settlers exploring and taming the uncharted lands of Catan. Embark on a quest to settle the rich island, competing against more opponents for added fun. ● Add 1-2 more friends or family without sacrificing ease of play. ● Add green and brown settlers and expand your island with 2 more harbors and 11 unique, new terrain tiles. This is NOT a complete game! It is only a game extension for 5-6 players. You need a Catan game (aka The Settlers of Catan) in order to play with this extension! Components ● 11 Hexagonal Regional Tiles ● 2 Frame Pieces with Harbors ● 2 All-Sea Frame Pieces ● 10 Wooden Settlements ● 8 Wooden Cities ● 30 Wooden Roads ● 25 Resource Cards ● 9 Development Cards ● 28 Number Tokens",
      "description_preview": "Now five to six players can explore and settle Catan! In the Catan: 5-6 Player Extension you control a group of settlers exploring and taming the uncharted lands of Catan. Embark on a quest to settle the rich island, competing against more opponents for added fun. ● Add 1-2 more friends or family without sacrificing ease of play. ● Add green and brown settlers and expand your island with 2 more harbors and 11 unique, new terrain tiles. This is NOT a complete game! It is only a game extension for 5-6 players. You need a Catan game (aka The Settlers of Catan) in order to play with this extension! Components ● 11 Hexagonal Regional Tiles ● 2 Frame Pieces with Harbors ● 2 All-Sea Frame Pieces ● 10 Wooden Settlements ● 8 Wooden Cities ● 30 Wooden Roads ● 25 Resource Cards ● 9 Development Cards ● 28 Number Tokens",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/EvYzPCnCGG/catan-56-player-extension",
      "price": "22.50",
      "msrps": [
        {
          "country": "US",
          "price": 22.49
        }
      ],
      "discount": "-0.00",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "r6yIFvyXDD"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        },
        {
          "id": "jZEDOpx07e"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Harald Lieske",
        "Michael Menzel",
        "Marion Pott",
        "Klaus Teuber",
        "Stephen Graham Walsh"
      ],
      "names": [
        "Catan: 5-6 Player Extension",
        "Catan: 5-6 Player Extension (Fifth Edition)",
        "Catan: 5-6 Player Extension",
        "Catan extension pour 5 et 6 joueurs 2016",
        "Catan Edition Base Game 5 6 Player Extension"
      ],
      "num_user_ratings": 130,
      "average_user_rating": 3.1609890109890104,
      "official_url": "https://www.catan.com/game/settlers-catan-extension-5-6-players?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "https://www.catan.com/files/downloads/catan_5-6_5th_ed_rules_150303.pdf",
      "matches_specs": null,
      "spec": [],
      "rank": 335,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "NoWy3nPYfj",
      "name": "Catan: Seafarers Expansion",
      "year_published": null,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "In Catan: Seafarers you control a group of bold seafaring settlers exploring and taming the wild, uncharted Isles of Catan. Each game brings you to new seas and new lands. You might even discover the precious gold fields (a very valuable new terrain).<br><br>  Every game is unique and full of fun!<br><br>  Embark on an epic quest to settle the home island, build ships, and chart nearby waters. Guide your brave seafarers to victory through cunning trades and wise development. Be first to create new sea lanes and settle the newly-discovered isles.<br><br>   The best strategy and a nice dash of luck decide who will be the undisputed ruler of the rich Isles of Catan!<br>  Capture the adventure of seafaring, exploration, and trade.<br>  Catan: Seafarers is a 3-4 player expansion for the best-selling Catan board game. Share some fun at sea!<br><br> Components<br>  60 Wooden Ships<br>  1 Pirate Ship<br>  6 Frame Pieces<br>  19 Sea Hexes<br>  11 Hexagonal Region Tiles<br>  50 Catan Chits<br>  10 Number Tokens<br>  10 Harbor Tokens<br>  1 Rulebook and Scenarios",
      "description_preview": "In Catan: Seafarers you control a group of bold seafaring settlers exploring and taming the wild, uncharted Isles of Catan. Each game brings you to new seas and new lands. You might even discover the precious gold fields (a very valuable new terrain).    Every game is unique and full of fun!    Embark on an epic quest to settle the home island, build ships, and chart nearby waters. Guide your brave seafarers to victory through cunning trades and wise development. Be first to create new sea lanes and settle the newly-discovered isles.     The best strategy and a nice dash of luck decide who will be the undisputed ruler of the rich Isles of Catan!   Capture the adventure of seafaring, exploration, and trade.   Catan: Seafarers is a 3-4 player expansion for the best-selling Catan board game. Share some fun at sea!   Components   60 Wooden Ships   1 Pirate Ship   6 Frame Pieces   19 Sea Hexes   11 Hexagonal Region Tiles   50 Catan Chits   10 Number Tokens   10 Harbor Tokens   1 Rulebook and Scenarios",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/NoWy3nPYfj/catan-seafarers-expansion",
      "price": "43.99",
      "msrps": [
        {
          "country": "US",
          "price": 49
        }
      ],
      "discount": "0.10",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        }
      ],
      "designers": [],
      "developers": [],
      "artists": [],
      "names": [
        "Catan: Seafarers",
        "Catan: Seafarers (Fifth Edition)",
        "Catan: Seafarers Expansion  (Add to cart to see price)",
        "Catan: Seafarers Game Expansion",
        "Catan: Seafarers"
      ],
      "num_user_ratings": 112,
      "average_user_rating": 3.2589285714285707,
      "matches_specs": null,
      "spec": [],
      "rank": 372,
      "trending_rank": 0
    },
    {
      "id": "MiOTS94YV3",
      "name": "Catan Card Game",
      "year_published": 1996,
      "min_players": 2,
      "max_players": 4,
      "min_playtime": 45,
      "max_playtime": 60,
      "min_age": 10,
      "description": "<p>Cunning and a dash of luck decides who will be the undisputed master of Catan!</p>",
      "description_preview": " Cunning and a dash of luck decides who will be the undisputed master of Catan! ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/MiOTS94YV3/catan-card-game",
      "price": "24.95",
      "msrps": [
        {
          "country": "US",
          "price": 15
        }
      ],
      "discount": "-0.66",
      "primary_publisher": {
        "id": "7GTti1NuCH",
        "name": "Mayfair Games",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "iWODHwRGuU"
        },
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Tanja Donner",
        "Pete Fenlon",
        "Jason Hawkins",
        "Michaela Kienle",
        "Matt Schwabel",
        "Klaus Teuber",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [
        "Catan Telepesei: Kártyajáték",
        "Catan το παιχνίδι με κάρτες",
        "Catan: Jocul de carti",
        "Catanin uudisasukkaat: Korttipeli",
        "I Coloni di Catan: Gioco di Carte",
        "Colonistii din Catan jocul de carti",
        "Los colonos de Catán: El juego de cartas",
        "Les Colons de Catane: Le Jeu de Cartes",
        "De Kolonisten van Catan: Het Kaartspel",
        "Naseljenci otoka Catan: Igra s kartami",
        "Naseljenci otoka Catan: Igra s kartami za dva igralca",
        "Osadníci z Katanu: Karetní hra pro 2 hráče",
        "Osadnicy z Catanu: Gra Karciana",
        "The Settlers of Catan Card Game",
        "Die Siedler von Catan: Das Kartenspiel",
        "Die Siedler von Catan: Kartenspiel – Für zwei Spieler",
        "Карточные колонизаторы",
        "Колонизаторы. Карточная игра",
        "卡坦島紙牌版"
      ],
      "num_user_ratings": 69,
      "average_user_rating": 3.0555555555555554,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 706,
      "trending_rank": 0,
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "iSVnYdrsZQ",
      "name": "Rivals for Catan",
      "year_published": 2010,
      "min_players": 2,
      "max_players": 2,
      "min_playtime": 30,
      "max_playtime": 90,
      "min_age": 11,
      "description": "<p>Build your domain to best your Rivals.<br /><br />The Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your under card mix to create your own principality. Explore and settle new lands, acquiring resources through card play and the luck of the dice. Use gold, response combinations, and trade to develop your domain. <br /><br />Expand your settlements and cities recruit heroes, and defend your lands through politics, invention, and intrigue. Your cunning and a dash of luck decides who will be Prince of Catan.</p>",
      "description_preview": " Build your domain to best your Rivals.  The Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your under card mix to create your own principality. Explore and settle new lands, acquiring resources through card play and the luck of the dice. Use gold, response combinations, and trade to develop your domain.   Expand your settlements and cities recruit heroes, and defend your lands through politics, invention, and intrigue. Your cunning and a dash of luck decides who will be Prince of Catan. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257779718-51eU0IClsEL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257779718-51eU0IClsEL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257779718-51eU0IClsEL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257779718-51eU0IClsEL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257779718-51eU0IClsEL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257779718-51eU0IClsEL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257779718-51eU0IClsEL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/iSVnYdrsZQ/rivals-for-catan",
      "price": "22.95",
      "msrps": [
        {
          "country": "US",
          "price": 16.99
        }
      ],
      "discount": "-0.35",
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        "Catan Studio",
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "iWODHwRGuU"
        },
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ"
        },
        {
          "id": "ODWOjWAJj3"
        },
        {
          "id": "QAYkTHK1Dd"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Michael Menzel"
      ],
      "names": [
        "Catan: Rivals for Catan Card Game",
        "The Rivals for Catan",
        "Rivals for Catan",
        "Rivals for Catan - Ding & Dent",
        "Catan Duel",
        "Catan: Das Duell",
        "Catan: El duelo",
        "Catan: Het Duel",
        "Catan: Il Duello",
        "Die Fürsten von Catan",
        "Knížata z Katanu",
        "Les Princes de Catane",
        "Los Príncipes de Catán",
        "De Vorsten van Catan",
        "Колонизаторы: Князья Катана",
        "Крале и Владетели на Катан"
      ],
      "num_user_ratings": 41,
      "average_user_rating": 3.1707317073170724,
      "official_url": "http://www.catan.com/game/rivals-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 964,
      "trending_rank": 0,
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "l2i97dfuvD",
      "name": "Star Trek: Catan",
      "year_published": 2012,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 75,
      "max_playtime": 90,
      "min_age": 10,
      "description": "SPACE...<br />\r\n<br />\r\n...the Final Frontier. The many resource rich planets within the limits of Federation territory await exploration and settlement. Build outposts and star bases to extract the resources. Using your fleet of starships, establish supply routes that enable you to boldly go further into deep space. Avoid resource shortages by trading with your opponents and Federation neighbors. If your opponents venture too far into your space, though, you might need to divert the Klingons to drive them away... because in the end, only one can be the Federation's greatest hero! Take up the challenge!<br />\r\n<br />\r\nSTAR TREK CATAN transports the timeless game concept of the world's most acclaimed board game-THE SETTLERS OF CATAN-into the exciting Star Trek universe. The popular characters of the Starship Enterprise come into play through novel new &quot;support cards.&quot; Build, trade and settle where no one has gone before!<br />\r\n<br />\r\nSince 1966, millions of Star Trek� fans all over the world have watched the adventures of the Starship Enterprise, Captain Kirk, and Mr. Spock. And since 1995, millions of enthusiastic players all over the world have played Klaus Teuber's The Settlers of Catan�-a board game classic.<br />\r\n<br />\r\nIt's time to bring them all together on the Final Frontier!",
      "description_preview": "SPACE... \r\n \r\n...the Final Frontier. The many resource rich planets within the limits of Federation territory await exploration and settlement. Build outposts and star bases to extract the resources. Using your fleet of starships, establish supply routes that enable you to boldly go further into deep space. Avoid resource shortages by trading with your opponents and Federation neighbors. If your opponents venture too far into your space, though, you might need to divert the Klingons to drive them away... because in the end, only one can be the Federation's greatest hero! Take up the challenge! \r\n \r\nSTAR TREK CATAN transports the timeless game concept of the world's most acclaimed board game-THE SETTLERS OF CATAN-into the exciting Star Trek universe. The popular characters of the Starship Enterprise come into play through novel new \"support cards.\" Build, trade and settle where no one has gone before! \r\n \r\nSince 1966, millions of Star Trek� fans all over the world have watched the adventures of the Starship Enterprise, Captain Kirk, and Mr. Spock. And since 1995, millions of enthusiastic players all over the world have played Klaus Teuber's The Settlers of Catan�-a board game classic. \r\n \r\nIt's time to bring them all together on the Final Frontier!",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/l2i97dfuvD/star-trek-catan",
      "price": "52.00",
      "msrps": [
        {
          "country": "US",
          "price": 49.5
        }
      ],
      "discount": "-0.05",
      "primary_publisher": {
        "name": "Asmodee",
        "id": "1LE7oe5KVZ",
        "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/asmodee"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Franz Vohwinkel",
        "Imelda Vohwinkel"
      ],
      "names": [],
      "num_user_ratings": 34,
      "average_user_rating": 3.5,
      "official_url": "http://www.catan.com/game/star-trek-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 1017,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "ULWQvi77f5",
      "name": "Catan: Junior",
      "year_published": 2011,
      "min_players": 2,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 66,
      "min_age": 5,
      "description": "Explore the Seas! Catan: Junior? introduces a modified playing style of the classic game giving younger players the opportunity to experience the world of Catan! Designed for players as young as 5 and is a perfect introduction to the Catan series of games for kids and families.<br />\r\n<br />\r\nCatan: Junior? takes place on a ring of islands where 2 to 4 players build hideouts, and the mysterious Spooky Island, where the Ghost Captain lives. Each island generates a specific resource: wood, goats, rum or swords and players can acquire gold. <br />\r\n<br />\r\nEach player starts with two pirate hideouts, then builds ships in order to expand their network. The more hideouts you build, the more resources you may receive. You use your resources to build ships, hideouts or get help from Coco the Parrot. Just watch out for the dreaded Ghost Captain!<br />\r\n<br />\r\nBe the first player to control seven pirate hideouts and you win the game!",
      "description_preview": "Explore the Seas! Catan: Junior? introduces a modified playing style of the classic game giving younger players the opportunity to experience the world of Catan! Designed for players as young as 5 and is a perfect introduction to the Catan series of games for kids and families. \r\n \r\nCatan: Junior? takes place on a ring of islands where 2 to 4 players build hideouts, and the mysterious Spooky Island, where the Ghost Captain lives. Each island generates a specific resource: wood, goats, rum or swords and players can acquire gold.  \r\n \r\nEach player starts with two pirate hideouts, then builds ships in order to expand their network. The more hideouts you build, the more resources you may receive. You use your resources to build ships, hideouts or get help from Coco the Parrot. Just watch out for the dreaded Ghost Captain! \r\n \r\nBe the first player to control seven pirate hideouts and you win the game!",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559255068666-61XXtCq1dcL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559255068666-61XXtCq1dcL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/ULWQvi77f5/catan-junior",
      "price": "27.00",
      "msrps": [
        {
          "country": "US",
          "price": 30
        }
      ],
      "discount": "0.10",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        "Catan Studio",
        {},
        {},
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [
        {
          "id": "HKaYVNIxAJ"
        },
        {
          "id": "vqZ5XzGWQD"
        },
        {
          "id": "9EIayX6n5a"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Patricia Raubo"
      ],
      "names": [
        "Catan: Junior",
        "Catan: Junior"
      ],
      "num_user_ratings": 40,
      "average_user_rating": 3.1249999999999987,
      "official_url": "https://www.catan.com/game/catan-junior#?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "https://www.catan.com/files/downloads/catan_junior_rules_160420s.pdf",
      "matches_specs": null,
      "spec": [],
      "rank": 1043,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "b7EIdXzESo",
      "name": "Starfarers of Catan",
      "year_published": 2000,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 90,
      "max_playtime": 150,
      "min_age": 12,
      "description": "Compete for the prestigious post of Ambassador to the Galactic Council. To attain this lofty position, players must leave Terra and the known planets to explore and colonize the galaxy, while working to establish trade with alien cultures, encounter aliens and defeat pirates. Victory to the brave and astute explorer who luck smiles upon. Each player begins with two Colonies and a Space Port (all components are made from plastic). The Space Port makes starships to transport your new colonies and trade posts to distant lands. Throughout the game all the colonies and spaceports enable the production of resources when the dice match the numbers of adjacent planets. Resources are traded for colony ships, trade ships, and fleet upgrades of freight rings, booster rockets, and cannon. Beware as you explore -- some planets are covered in ice, and some conceal dangerous pirates. For 3 to 4 players.",
      "description_preview": "Compete for the prestigious post of Ambassador to the Galactic Council. To attain this lofty position, players must leave Terra and the known planets to explore and colonize the galaxy, while working to establish trade with alien cultures, encounter aliens and defeat pirates. Victory to the brave and astute explorer who luck smiles upon. Each player begins with two Colonies and a Space Port (all components are made from plastic). The Space Port makes starships to transport your new colonies and trade posts to distant lands. Throughout the game all the colonies and spaceports enable the production of resources when the dice match the numbers of adjacent planets. Resources are traded for colony ships, trade ships, and fleet upgrades of freight rings, booster rockets, and cannon. Beware as you explore -- some planets are covered in ice, and some conceal dangerous pirates. For 3 to 4 players.",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/b7EIdXzESo/starfarers-of-catan",
      "price": "79.99",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [],
      "designers": [],
      "developers": [],
      "artists": [],
      "names": [
        "The Starfarers of Catan"
      ],
      "num_user_ratings": 29,
      "average_user_rating": 3.3103448275862073,
      "official_url": "https://www.catan.com/game/starfarers-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "https://www.catan.com/files/downloads/starfarers_4p_rules_v4-0.pdf",
      "matches_specs": null,
      "spec": [],
      "rank": 1234,
      "trending_rank": 0
    },
    {
      "id": "gnv8PYIV3A",
      "name": "Catan Dice Game",
      "year_published": 2007,
      "min_players": 1,
      "max_players": 4,
      "min_playtime": 15,
      "max_playtime": 15,
      "min_age": 7,
      "description": "<p>Like all the other games of the &quot;Settlers of Catan&quot; series, this game is about building settlements, roads, cities and hiring knights. This time, there is no board on which to place little figures: Every player has his own score card called the <em>building sheet</em>, which depicts a mini Catan (compare with Die Siedler von Catan: Paper &amp; Pencil). You build by drawing the settlements and roads on your score card.</p>\r\n\r\n<p>To build you still require resources. These are collected by a Yahtzee-like mechanism that involves throwing six special dice (depicting the different resource symbols) up to three times. After each roll, the player can select which dice to keep and which to roll again. In the end, he may build using the thusly determined resources, and is awarded victory points for any finished buildings, which are recorded on the score card.</p>\r\n\r\n<p>The game lasts fifteen turns or about 15-30 minutes, after which the player with the most victory points wins.</p>\r\n\r\n<p>Note that the game has been designed for 1-4 players, meaning there is a solitaire version of the game, as well.</p>\r\n\r\n<p>Recent versions include double-sided map sheets and instructions for <a href=\"/boardgameexpansion/38845/catan-dice-game-plus\">Catan Dice Game Plus</a>.</p>",
      "description_preview": " Like all the other games of the \"Settlers of Catan\" series, this game is about building settlements, roads, cities and hiring knights. This time, there is no board on which to place little figures: Every player has his own score card called the  building sheet , which depicts a mini Catan (compare with Die Siedler von Catan: Paper & Pencil). You build by drawing the settlements and roads on your score card. \r\n\r\n To build you still require resources. These are collected by a Yahtzee-like mechanism that involves throwing six special dice (depicting the different resource symbols) up to three times. After each roll, the player can select which dice to keep and which to roll again. In the end, he may build using the thusly determined resources, and is awarded victory points for any finished buildings, which are recorded on the score card. \r\n\r\n The game lasts fifteen turns or about 15-30 minutes, after which the player with the most victory points wins. \r\n\r\n Note that the game has been designed for 1-4 players, meaning there is a solitaire version of the game, as well. \r\n\r\n Recent versions include double-sided map sheets and instructions for  Catan Dice Game Plus . ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1545159442951",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1545159442951",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1545159442951",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1545159442951",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951"
      },
      "url": "https://www.boardgameatlas.com/game/gnv8PYIV3A/catan-dice-game",
      "price": "12.00",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "name": "999 Games",
        "id": "r2R8bUHIRD",
        "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/999-games"
      },
      "publishers": [
        "999 Games",
        {},
        {},
        {},
        {},
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "UHdPUeuqyZ"
        },
        {
          "id": "lA3KUtVFCy"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Michaela Kienle",
        "Harald Lieske",
        "Michael Menzel",
        "Klaus Teuber"
      ],
      "names": [
        "Catan Dice Game"
      ],
      "num_user_ratings": 41,
      "average_user_rating": 2.634146341463415,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 1248,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "xViD75B4N1",
      "name": "Starship Catan",
      "year_published": 2001,
      "min_players": 2,
      "max_players": 2,
      "min_playtime": 60,
      "max_playtime": 60,
      "min_age": 12,
      "description": "In a flash, two Starfarers from the Catan space fleet have been thrown through a mysterious wormhole into an unknown galaxy. Lost, dazed and unable to find their way home, and with limited resources, the brave explorers face a seemingly hopeless situation, until they meet four peaceful alien races. These friendly aliens offer them limited aid and will guide them home if they can meet the high standards required for entrance into the Galactic Advisory Council. Take the role of a Starfarer! Daringly brave the unknown reaches of space! Explore and colonize new worlds, strike vital trade agreements and perform missions of mercy, while improving and preparing your Starship for the journey home. If you work hard and choose your course carefully and vigorously, you will attain membership in the Council and learn the way home!Beware! Not every alien in the galaxy will look upon you with friendliness. Dastardly space pirates desire your wealth and influence. Their raids are merciless, and their strength is growing! Be careful as you speed through the unknown! Only a careful balance of colonization and trade, bravery and caution, will lead you and your crew home.Lost in the depths of space? Not a problem for a real Starfarer! Activate your boosters for an adventure of space discovery!",
      "description_preview": "In a flash, two Starfarers from the Catan space fleet have been thrown through a mysterious wormhole into an unknown galaxy. Lost, dazed and unable to find their way home, and with limited resources, the brave explorers face a seemingly hopeless situation, until they meet four peaceful alien races. These friendly aliens offer them limited aid and will guide them home if they can meet the high standards required for entrance into the Galactic Advisory Council. Take the role of a Starfarer! Daringly brave the unknown reaches of space! Explore and colonize new worlds, strike vital trade agreements and perform missions of mercy, while improving and preparing your Starship for the journey home. If you work hard and choose your course carefully and vigorously, you will attain membership in the Council and learn the way home!Beware! Not every alien in the galaxy will look upon you with friendliness. Dastardly space pirates desire your wealth and influence. Their raids are merciless, and their strength is growing! Be careful as you speed through the unknown! Only a careful balance of colonization and trade, bravery and caution, will lead you and your crew home.Lost in the depths of space? Not a problem for a real Starfarer! Activate your boosters for an adventure of space discovery!",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257943503-615XH46133L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257943503-615XH46133L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257943503-615XH46133L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257943503-615XH46133L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/xViD75B4N1/starship-catan",
      "price": "199.99",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "r6yIFvyXDD"
        },
        {
          "id": "hmipYN1R1I"
        },
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Tanja Donner",
        "Franz Vohwinkel"
      ],
      "names": [],
      "num_user_ratings": 30,
      "average_user_rating": 3.2,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 1284,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "KCCkl1g9GR",
      "name": "Catan: Traders & Barbarians",
      "year_published": 2007,
      "min_players": 2,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>In Catan: Traders &amp; Barbarians, you'll discover exciting, new ways to explore Klaus Teuber's award-winning game series. You can now play with just two players! Add a harbormaster, a friendly robber, or special events. Play with a wealth of new wooden pieces and capabilities. You can even link your games to create an intriguing campaign. Use these four variants and five scenarios to reinvent your Catan experience! Requires ownership of the Catan base game to play.</p>\r\n<p><br />This compilation includes 5 scenarios:</p>\r\n<p>    The Fishermen of Catan - Originally released in the 05/2006 Spielbox magazine and then subsequently released in Games Quarterly magazine. Expanded in this edition.<br />    The Rivers of Catan - Originally released in the Atlantis scenario box, then subsequently in Games Quarterly magazine as &quot;The Great River&quot;. Expanded in this edition to include two rivers, one occupying 4 tiles, and one occupying 3.<br />    The Great Caravan - Originally released as a free expansion in Germany.<br />    Barbarian Invasion - New in this edition. - Barbarians are invading Catan and the players have to try to stop them with new knight pieces. This plays very similarly to the flood mechanic in the Atlantis scenario from the Atlantis and Das Buch scenario packs.<br />    Traders &amp; Barbarians - New in this edition. - You get new hexes, one for the castle, one to produce glass, and one to produce marble. You try to rebuild Catan after the invasion. You get gold and victory points if you finish tasks in the castle, but to do so you have to travel back and forth to the castle on roads and undeveloped paths. There are still some barbarians around who interfere with trade routes.</p>\r\n<p>It also includes 4 minor variants:</p>\r\n<p>    2-Player Rules - Use the new &quot;Commercial Chips&quot; to force trade with your opponent. Use 3rd and 4th neutral player to block your opponent. Also available online: Klaus2player.pdf<br />    Catan Event Cards - Originally released in the Atlantis scenario box, then subsequently released for sale separately. Replaces the dice with a deck of cards to minimize randomness.<br />    The Harbormaster Card - Originally released in the Atlantis scenario box, then subsequently available online: harbormaster.pdf. Gives two victory points to the player with the most harbor points.<br />    Friendly Robber Rules</p>",
      "description_preview": " In Catan: Traders & Barbarians, you'll discover exciting, new ways to explore Klaus Teuber's award-winning game series. You can now play with just two players! Add a harbormaster, a friendly robber, or special events. Play with a wealth of new wooden pieces and capabilities. You can even link your games to create an intriguing campaign. Use these four variants and five scenarios to reinvent your Catan experience! Requires ownership of the Catan base game to play. \r\n  This compilation includes 5 scenarios: \r\n     The Fishermen of Catan - Originally released in the 05/2006 Spielbox magazine and then subsequently released in Games Quarterly magazine. Expanded in this edition.     The Rivers of Catan - Originally released in the Atlantis scenario box, then subsequently in Games Quarterly magazine as \"The Great River\". Expanded in this edition to include two rivers, one occupying 4 tiles, and one occupying 3.     The Great Caravan - Originally released as a free expansion in Germany.     Barbarian Invasion - New in this edition. - Barbarians are invading Catan and the players have to try to stop them with new knight pieces. This plays very similarly to the flood mechanic in the Atlantis scenario from the Atlantis and Das Buch scenario packs.     Traders & Barbarians - New in this edition. - You get new hexes, one for the castle, one to produce glass, and one to produce marble. You try to rebuild Catan after the invasion. You get gold and victory points if you finish tasks in the castle, but to do so you have to travel back and forth to the castle on roads and undeveloped paths. There are still some barbarians around who interfere with trade routes. \r\n It also includes 4 minor variants: \r\n     2-Player Rules - Use the new \"Commercial Chips\" to force trade with your opponent. Use 3rd and 4th neutral player to block your opponent. Also available online: Klaus2player.pdf     Catan Event Cards - Originally released in the Atlantis scenario box, then subsequently released for sale separately. Replaces the dice with a deck of cards to minimize randomness.     The Harbormaster Card - Originally released in the Atlantis scenario box, then subsequently available online: harbormaster.pdf. Gives two victory points to the player with the most harbor points.     Friendly Robber Rules ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540934790224",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540934790224",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540934790224",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540934790224",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224"
      },
      "url": "https://www.boardgameatlas.com/game/KCCkl1g9GR/catan-traders--barbarians-expansion-5th-edition",
      "price": "64.96",
      "msrps": [
        {
          "country": "US",
          "price": 49
        }
      ],
      "discount": "-0.33",
      "primary_publisher": {
        "id": "1LE7oe5KVZ",
        "name": "Asmodee",
        "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/asmodee"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "AZxlPpi5oq"
        },
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "r6yIFvyXDD"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "ohABM4GjbC"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "JYYdBW6UCE"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        },
        {
          "id": "jZEDOpx07e"
        },
        {
          "id": "CWYOF9xu7O"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Harald Lieske",
        "Michael Menzel"
      ],
      "names": [],
      "num_user_ratings": 27,
      "average_user_rating": 3.1481481481481484,
      "official_url": null,
      "rules_url": null,
      "weight_amount": 0.95,
      "weight_units": "lbs",
      "size_height": 11.6,
      "size_depth": 3.12,
      "size_units": "inches",
      "matches_specs": null,
      "spec": [],
      "rank": 1302,
      "trending_rank": 0,
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "6ZfddWsNPT",
      "name": "Catan Histories: Settlers of America Trails to Rails",
      "year_published": 2010,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 120,
      "max_playtime": 120,
      "min_age": 12,
      "description": "<p>The 19th Century has arrived and America is heading west. Wagon trains form on the frontier. Settlers seeking fresh lives and opportunities strike out to tame wild lands and build new cities. These new cities rely on young railroads for vital goods. Trails become rails and create great wealth. While the crowded East still offers options, its resources dwindle. Look west to make your fortune. Smart money seeks rich, unclaimed land and hungry new markets. Finance your settlers as they head west to build capitals of tomorrow. Link these cities with rails of steel. Operate your railroad to supply the townsfolk with goods. Go west. Settle the wide, open land. Claim your destiny. Settlers of America, Trails to Rails utilizes the simple, fun Catan hex-tile grid to map the young United States. Collect and trade resources in order to purchase and move settlers, build cities, lay rails and acquire and move trains. Create rail links to acquire gold, which lets you buy resources and use opponents' rails. Use trains to distribute goods to rival cities. But, as your settlers populate the West, they deplete the resources of the East. Still, your options always abound.</p>",
      "description_preview": " The 19th Century has arrived and America is heading west. Wagon trains form on the frontier. Settlers seeking fresh lives and opportunities strike out to tame wild lands and build new cities. These new cities rely on young railroads for vital goods. Trails become rails and create great wealth. While the crowded East still offers options, its resources dwindle. Look west to make your fortune. Smart money seeks rich, unclaimed land and hungry new markets. Finance your settlers as they head west to build capitals of tomorrow. Link these cities with rails of steel. Operate your railroad to supply the townsfolk with goods. Go west. Settle the wide, open land. Claim your destiny. Settlers of America, Trails to Rails utilizes the simple, fun Catan hex-tile grid to map the young United States. Collect and trade resources in order to purchase and move settlers, build cities, lay rails and acquire and move trains. Create rail links to acquire gold, which lets you buy resources and use opponents' rails. Use trains to distribute goods to rival cities. But, as your settlers populate the West, they deplete the resources of the East. Still, your options always abound. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/6ZfddWsNPT/catan-histories-settlers-of-america-trails-to-rails",
      "price": "46.99",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "ohABM4GjbC"
        },
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [
        {
          "id": "329DxyFL9D"
        },
        {
          "id": "jZEDOpx07e"
        },
        {
          "id": "JwHcKqxh33"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "David Cochard",
        "Pete Fenlon",
        "Harald Lieske",
        "Mark Zug"
      ],
      "names": [
        "Catan Histories: Settlers of America Board Game",
        "Catan Histories: Settlers of America",
        "Settlers of America Trails to Rails Edition",
        "Catan Historias: Los Colonos de América",
        "Catan Histories: I Coloni d'America",
        "De Kolonisten van Amerika",
        "Колонизаторы. Америка"
      ],
      "num_user_ratings": 23,
      "average_user_rating": 2.9999999999999996,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 1509,
      "trending_rank": 0,
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "77kv4LxMcX",
      "name": "Catan Histories: The Settlers of the Stone Age",
      "year_published": 2002,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 90,
      "max_playtime": 90,
      "min_age": 10,
      "description": "Sample Product Detail Header<p>Come join in the adventure that is the dawn of Humankind. Will your tribe journey far and fast? Will they surmount the pain dangers of this world? Will they bring you victory and survival? Are you ready to play in this newest creation of Master game designer Klaus Teuber Based on the award-winning Settlers of Catan game system, but presenting players with all-new challenges unique to the dangers and opportunities of the Stone Age. The cradle of modern humans, called Homo sapiens... by scientists, was located Africa more than 100,000 years ago. The first branches of this family began a journey that spanned thousands of years, eventually leading them to Australia and America. The enormous difficulties of this journey could only be overcome because of Homo sapiens... unique ability to adapt to its environment. Their highly developed brains and their mastery of crafts enabled them master even the harshest conditions. In this exciting game, you will guide the journey of one of these branches. You must struggle to spread your people over the whole world. In order to expand your branch humanity you must develop certain talents: advances in the preparation of food will allow your people to spread faster and wider, while new hunting techniques can protect them from dangers. And your people will need warm clothes to cross the ice deserts of the north and boats to settle in Australia.</p>",
      "description_preview": "Sample Product Detail Header Come join in the adventure that is the dawn of Humankind. Will your tribe journey far and fast? Will they surmount the pain dangers of this world? Will they bring you victory and survival? Are you ready to play in this newest creation of Master game designer Klaus Teuber Based on the award-winning Settlers of Catan game system, but presenting players with all-new challenges unique to the dangers and opportunities of the Stone Age. The cradle of modern humans, called Homo sapiens... by scientists, was located Africa more than 100,000 years ago. The first branches of this family began a journey that spanned thousands of years, eventually leading them to Australia and America. The enormous difficulties of this journey could only be overcome because of Homo sapiens... unique ability to adapt to its environment. Their highly developed brains and their mastery of crafts enabled them master even the harshest conditions. In this exciting game, you will guide the journey of one of these branches. You must struggle to spread your people over the whole world. In order to expand your branch humanity you must develop certain talents: advances in the preparation of food will allow your people to spread faster and wider, while new hunting techniques can protect them from dangers. And your people will need warm clothes to cross the ice deserts of the north and boats to settle in Australia. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/77kv4LxMcX/settlers-of-the-stone-age",
      "price": "64.95",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Tanja Donner",
        "Franz Vohwinkel"
      ],
      "names": [
        "The Settlers of the Stone Age"
      ],
      "num_user_ratings": 22,
      "average_user_rating": 3.0454545454545454,
      "official_url": "http://www.mayfairgames.com/products/abenteuer-menschheit?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 1527,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "3f3PmrkzV8",
      "name": "Catan Board Game: Gallery Edition",
      "year_published": 2008,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 60,
      "min_age": 10,
      "description": "<p>Embark on a quest to settle the fertile isle of Catan! Guide your brave settlers to victory by using clever trading and development. Use resources-grain, wool, ore, brick, and lumber-to build roads, settlements, and cities and buy key development cards. Acquire your resources through trades or the roll of the dice. But beware! You never know when someone might cut off your road or if the robber will appear and steal your precious gains! </p><p><b>Contains:</b> full-color game board, 6 island pieces, 20 settlement pieces, 16 city pieces, 60 road pieces, 4 scoring markers, 93 resource cards, 25 development cards, 2 special bonus cards, 2 six-sided dice, 1 robber piece, rules. </p><p><b>Note:</b> The Gallery Edition is different from the regular Settlers of Catan game in that it is not expandable. The cards and tiles are of the same high quality, but are slightly smaller.</p>",
      "description_preview": " Embark on a quest to settle the fertile isle of Catan! Guide your brave settlers to victory by using clever trading and development. Use resources-grain, wool, ore, brick, and lumber-to build roads, settlements, and cities and buy key development cards. Acquire your resources through trades or the roll of the dice. But beware! You never know when someone might cut off your road or if the robber will appear and steal your precious gains!    Contains:  full-color game board, 6 island pieces, 20 settlement pieces, 16 city pieces, 60 road pieces, 4 scoring markers, 93 resource cards, 25 development cards, 2 special bonus cards, 2 six-sided dice, 1 robber piece, rules.    Note:  The Gallery Edition is different from the regular Settlers of Catan game in that it is not expandable. The cards and tiles are of the same high quality, but are slightly smaller. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257163663-314phJ8Ev4L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257163663-314phJ8Ev4L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/3f3PmrkzV8/catan-board-game--gallery-edition",
      "price": "79.95",
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "r6yIFvyXDD"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Oliver Freudenreich"
      ],
      "names": [
        "Settlers of Catan: Gallery Edition"
      ],
      "num_user_ratings": 3,
      "average_user_rating": 2.3333333333333335,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "lb4nZbOLOD",
      "name": "Catan: Legend of the Sea Robbers Expansion",
      "year_published": null,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 90,
      "max_playtime": 120,
      "min_age": 10,
      "description": "Seventy years after the arrival of the first settlers, the Catanians have expanded throughout Catan. In Catan: Legend of the Sea Robbers, you and your fellow clan leaders play through four linked chapters, exploring new surroundings by sea. In each chapter, the Council of Catan provides a special mission that not only benefits your clan, but helps maintain peace throughout these new lands. Faced with the threat of the Sea Robbers, it is important for you to work to benefit your clan and open up new regions by building roads and settlements, always being mindful of Catan`s common good. The tasks given by the Council are their own reward and the ultimate goal - finding the right balance between strengthening your clan and completing these missions is key to the prosperity of Catan! <br />\r\n<br />\r\n<b>This is not a standalone product. A copy of the Catan and Catan: Seafarers is required to play.</b>",
      "description_preview": "Seventy years after the arrival of the first settlers, the Catanians have expanded throughout Catan. In Catan: Legend of the Sea Robbers, you and your fellow clan leaders play through four linked chapters, exploring new surroundings by sea. In each chapter, the Council of Catan provides a special mission that not only benefits your clan, but helps maintain peace throughout these new lands. Faced with the threat of the Sea Robbers, it is important for you to work to benefit your clan and open up new regions by building roads and settlements, always being mindful of Catan`s common good. The tasks given by the Council are their own reward and the ultimate goal - finding the right balance between strengthening your clan and completing these missions is key to the prosperity of Catan!  \r\n \r\n This is not a standalone product. A copy of the Catan and Catan: Seafarers is required to play. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540935745761",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540935745761",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540935745761",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540935745761",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540935745761",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540935745761",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540935745761"
      },
      "url": "https://www.boardgameatlas.com/game/lb4nZbOLOD/catan-legend-of-the-sea-robbers-expansion",
      "price": "18.00",
      "msrps": [
        {
          "country": "US",
          "price": 37
        }
      ],
      "discount": "0.51",
      "primary_publisher": {
        "name": "Asmodee",
        "id": "1LE7oe5KVZ",
        "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/asmodee"
      },
      "publishers": [
        {}
      ],
      "mechanics": [],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        }
      ],
      "designers": [],
      "developers": [],
      "artists": [],
      "names": [
        "Catan: Legend of the Sea Robbers",
        "Catan: Seafarers Scenario – Legend of the Sea Robbers",
        "Catan: Legend of the Sea Robbers",
        "Catan: Seafarers Scenario - Legend of the Sea Robbers",
        "Catan Seafarers: Legend Of The Sea Robbers",
        "Catan: Legend of the Sea Robbers"
      ],
      "num_user_ratings": 2,
      "average_user_rating": 3.5,
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0
    },
    {
      "id": "qiJzLWCvPB",
      "name": "Catan: Explorers & Pirates Expansion",
      "year_published": null,
      "min_players": 2,
      "max_players": 4,
      "min_playtime": 90,
      "max_playtime": 120,
      "min_age": 12,
      "description": "<b>Catan: Explorers &amp; Pirates</b> includes 5 novel scenarios, each of which builds upon your previous experience. All are easy to learn, rich in character, and lots of fun. In each, you explore an unknown sea by ship and build settlements on the discovered islands.<br /><br /> Scenario 1 (“Land Ho!”) introduces you to valuable harbor settlements, shipbuilding, exploration, and overseas settlement—the most important basic rules of this expansion. Each subsequent scenario introduces a new mission and its simple new rules. The game culminates in Scenario 5 (“Explorers &amp; Pirates”), which incorporates all of these very rich new themes in a diverse and exciting campaign of bold exploration and piracy!<br /><br /> Explore Catan! Build harbor settlements, ships, settlers, and sailing crews and set out across mysterious seas in search of new lands, spices, fish, and gold fields.<br /><br />  Components<br />  16 harbor settlements (wood)<br />  32 adventurers (wood)<br />  12 ships (wood)<br />  8 settlers (wood)<br />  12 markers (wood double cubes)<br />  4 pirate ships (wood)<br />  6 fish(wood)<br />  24 spice sacks (wood cubes)<br />  76 gold coins (die cut)<br />  12 frame pieces<br />  6 gold field hexes<br />  6 fish shoal hexes<br />  6 spice hexes<br />  6 terrain hexes and 6 number tokens (green backs)<br />  6 terrain hexes and 6 number tokens (orange backs)<br />  6 pirate lair tokens<br />  3 mission cards<br />  3 mission victory point cards<br />  4 building cost cards<br />",
      "description_preview": " Catan: Explorers & Pirates  includes 5 novel scenarios, each of which builds upon your previous experience. All are easy to learn, rich in character, and lots of fun. In each, you explore an unknown sea by ship and build settlements on the discovered islands.   Scenario 1 (“Land Ho!”) introduces you to valuable harbor settlements, shipbuilding, exploration, and overseas settlement—the most important basic rules of this expansion. Each subsequent scenario introduces a new mission and its simple new rules. The game culminates in Scenario 5 (“Explorers & Pirates”), which incorporates all of these very rich new themes in a diverse and exciting campaign of bold exploration and piracy!   Explore Catan! Build harbor settlements, ships, settlers, and sailing crews and set out across mysterious seas in search of new lands, spices, fish, and gold fields.    Components   16 harbor settlements (wood)   32 adventurers (wood)   12 ships (wood)   8 settlers (wood)   12 markers (wood double cubes)   4 pirate ships (wood)   6 fish(wood)   24 spice sacks (wood cubes)   76 gold coins (die cut)   12 frame pieces   6 gold field hexes   6 fish shoal hexes   6 spice hexes   6 terrain hexes and 6 number tokens (green backs)   6 terrain hexes and 6 number tokens (orange backs)   6 pirate lair tokens   3 mission cards   3 mission victory point cards   4 building cost cards ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/qiJzLWCvPB/catan-explorers-and-pirates-expansion",
      "price": "44.00",
      "msrps": [
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.20",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "jMwUJLemr6"
        },
        {
          "id": "Rt6V388y6M"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr"
        }
      ],
      "designers": [],
      "developers": [],
      "artists": [],
      "names": [
        "Catan: Explorers & Pirates",
        "Explorers Pirates Expansion Edition"
      ],
      "num_user_ratings": 14,
      "average_user_rating": 3.5714285714285716,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0,
      "primary_designer": {}
    },
    {
      "id": "fz1hSbgUN2",
      "name": "A Game of Thrones Catan: Brotherhood of the Watch",
      "year_published": 2017,
      "min_players": 3,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 75,
      "min_age": 14,
      "description": "Take the Black! Defend Westeros! Become the Lord Commander! The Brothers of the Night`s Watch seek a new leader from among their ranks. Jeor Mormont wishes to promote one who can improve the infrastructure of the Gift, the bountiful and undeveloped area south of the Wall bestowed to the Watch by the Starks thousands of years ago. Drawing sustenance from the unforgiving landscape of the north offers enough challenges, but whomever takes up this task must also man and defend the Wall against the onslaught of Wildlings fighting their way into Westeros. Many brothers now compete to build, defend, and do what they can to protect Westeros, but only one shall rise above their brothers to become the new Lord Commander. But, be wary - the north holds many dangers, and winter is coming. The battle to defend the Realms of Man begins in A Game of Thrones Catan: Brotherhood of the Watch, a strategic game grounded in the engrossing world of George R. R. Martin`s A Song of Ice and Fire series and adapted for Catan by Klaus and Benjamin Teuber.",
      "description_preview": "Take the Black! Defend Westeros! Become the Lord Commander! The Brothers of the Night`s Watch seek a new leader from among their ranks. Jeor Mormont wishes to promote one who can improve the infrastructure of the Gift, the bountiful and undeveloped area south of the Wall bestowed to the Watch by the Starks thousands of years ago. Drawing sustenance from the unforgiving landscape of the north offers enough challenges, but whomever takes up this task must also man and defend the Wall against the onslaught of Wildlings fighting their way into Westeros. Many brothers now compete to build, defend, and do what they can to protect Westeros, but only one shall rise above their brothers to become the new Lord Commander. But, be wary - the north holds many dangers, and winter is coming. The battle to defend the Realms of Man begins in A Game of Thrones Catan: Brotherhood of the Watch, a strategic game grounded in the engrossing world of George R. R. Martin`s A Song of Ice and Fire series and adapted for Catan by Klaus and Benjamin Teuber.",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559253943929-518A7X4Ms9L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253943929-518A7X4Ms9L.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/fz1hSbgUN2/a-game-of-thrones-catan-brotherhood-of-the-watch",
      "price": "55.00",
      "msrps": [
        {
          "country": "US",
          "price": 67.99
        }
      ],
      "discount": "0.19",
      "primary_publisher": {
        "name": "Fantasy Flight Games",
        "id": "fLH8tXTBBp",
        "url": "https://www.boardgameatlas.com/publisher/fLH8tXTBBp/fantasy-flight-games"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "U3zhCQH7Et"
        },
        {
          "id": "AVY6EvSQTP"
        },
        {
          "id": "ohABM4GjbC"
        }
      ],
      "categories": [],
      "designers": [
        {},
        {}
      ],
      "developers": [],
      "artists": [],
      "names": [
        "A Game of Thrones Catan: Brotherhood of the Watch",
        "Catan: Game of Thrones GoT Board Game"
      ],
      "num_user_ratings": 13,
      "average_user_rating": 3,
      "official_url": "https://www.fantasyflightgames.com/en/products/a-game-of-thrones-catan-brotherhood-of-the-watch/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "w9WUTsmCKB",
      "name": "Elasund: The First City",
      "year_published": 2005,
      "min_players": 2,
      "max_players": 4,
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>Elasund? The little settlement on the coast? Well, those days are long gone. Elasund is growing rapidly and Catanians are streaming into the city, eager to make a fortune. You are appointed to help the city develop. You heed the call to drive the city's growth and prosperity forward. You have already hired workers and acquired bulding materials. What will your next building project be? And, just as important, where will it be? You are not the only developer in town, so you will need to be savvy and resourceful. Your competition is eager to outperform you and claim all of the credit.</p>\r\n<p>Fortunately, you'll get the hand of this business quickly. Despite having limited resources early on you have enough gold to construct your first few small buildings. Your influential connections will provide you with all the necessary building permits. Once a building is constructed, it can start generating gold or influence for your use. Soon this flow of materials will allow you to start going after bigger projects. You may even become involved in the construction of the town church or the city walls.</p>\r\n<p>But beware of your competitors. They may try to leverage their way into your neighborhood with their own permits. If you don't watch themclosely enough, they might even attempt a hostile takeover of your buildings. Will you emerge as Elasuand's most influential city developer? Find out in this Catan adventure.</p>",
      "description_preview": " Elasund? The little settlement on the coast? Well, those days are long gone. Elasund is growing rapidly and Catanians are streaming into the city, eager to make a fortune. You are appointed to help the city develop. You heed the call to drive the city's growth and prosperity forward. You have already hired workers and acquired bulding materials. What will your next building project be? And, just as important, where will it be? You are not the only developer in town, so you will need to be savvy and resourceful. Your competition is eager to outperform you and claim all of the credit. \r\n Fortunately, you'll get the hand of this business quickly. Despite having limited resources early on you have enough gold to construct your first few small buildings. Your influential connections will provide you with all the necessary building permits. Once a building is constructed, it can start generating gold or influence for your use. Soon this flow of materials will allow you to start going after bigger projects. You may even become involved in the construction of the town church or the city walls. \r\n But beware of your competitors. They may try to leverage their way into your neighborhood with their own permits. If you don't watch themclosely enough, they might even attempt a hostile takeover of your buildings. Will you emerge as Elasuand's most influential city developer? Find out in this Catan adventure. ",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254812526-51a2BfU58jCL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254812526-51a2BfU58jCL.jpg"
      },
      "url": "https://www.boardgameatlas.com/game/w9WUTsmCKB/mayfair-games-catan-adventures-elasund--the-first-city",
      "price": "28.95",
      "msrps": [
        {
          "country": "US",
          "price": 49
        }
      ],
      "discount": "0.41",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        {}
      ],
      "mechanics": [
        {
          "id": "3te2oybNR4"
        },
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "lA3KUtVFCy"
        },
        {
          "id": "8PN2HE86wg"
        }
      ],
      "categories": [],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Tanja Donner"
      ],
      "names": [
        "Elasund: Die erste Stadt",
        "Elasund: La Première Cité",
        "Elasund: První město",
        "Elasund: Первый город",
        "Catan Adventures: Elasund - The First City",
        "Catan Adventures Elasund The First City"
      ],
      "num_user_ratings": 16,
      "average_user_rating": 3.0625,
      "official_url": null,
      "rules_url": null,
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    },
    {
      "id": "QmxNxi1Vrm",
      "name": "Rivals for Catan: Deluxe",
      "year_published": 2016,
      "min_players": 2,
      "max_players": 2,
      "min_playtime": 45,
      "max_playtime": 60,
      "min_age": 10,
      "description": "Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your unique card mix to create your own principality. Explore and settle new lands. Acquire resources through card play and the luck of the dice. Use gold, resource combinations, and trade to develop your domain. Expand your settlements and cities, recruit heroes, and defend your lands through politics, invention, and intrigue. Use your cunning! Become prince of Catan! The perfect way for two players to settle and develop the ever-mysterious and fantastic land of Catan, this Deluxe Edition of Rivals for Catan features all-new card trays to keep your draw piles organized, and comes with three expansions and nine rare promotional cards.",
      "description_preview": "Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your unique card mix to create your own principality. Explore and settle new lands. Acquire resources through card play and the luck of the dice. Use gold, resource combinations, and trade to develop your domain. Expand your settlements and cities, recruit heroes, and defend your lands through politics, invention, and intrigue. Use your cunning! Become prince of Catan! The perfect way for two players to settle and develop the ever-mysterious and fantastic land of Catan, this Deluxe Edition of Rivals for Catan features all-new card trays to keep your draw piles organized, and comes with three expansions and nine rare promotional cards.",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422",
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540938951422",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540938951422",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540938951422",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540938951422",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422"
      },
      "url": "https://www.boardgameatlas.com/game/QmxNxi1Vrm/rivals-for-catan-deluxe",
      "price": "29.60",
      "msrps": [
        {
          "country": "US",
          "price": 37
        }
      ],
      "discount": "0.20",
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "publishers": [
        "Asmodee Editions",
        {},
        {},
        {},
        {},
        {}
      ],
      "mechanics": [
        {
          "id": "iWODHwRGuU"
        },
        {
          "id": "R0bGq4cAl4"
        },
        {
          "id": "WPytek5P8l"
        },
        {
          "id": "AVY6EvSQTP"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ"
        },
        {
          "id": "buDTYyPw4D"
        }
      ],
      "designers": [
        {}
      ],
      "developers": [],
      "artists": [
        "Michael Menzel"
      ],
      "names": [
        "Catan: Duel",
        "Catan: Pojedynek",
        "Settlers of Catan Rivals for Catan Deluxe Edition"
      ],
      "num_user_ratings": 2,
      "average_user_rating": 3.5,
      "official_url": "https://www.catan.com/game/rivals-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "rules_url": "https://www.catan.com/files/downloads/rivals_deluxe_rules_160511.pdf",
      "matches_specs": null,
      "spec": [],
      "rank": 9999999,
      "trending_rank": 0,
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      }
    }
  ]
}
  recorded_at: Sat, 09 Jan 2021 23:52:03 GMT
recorded_with: VCR 6.0.0
